import { Draft } from 'immer';
import { State } from 'reactn/default';
import ReactNProvider from 'reactn/types/provider';
/**
 * Updater callback, which supports passing a callback
 * function, which accepts a draft or a finished state object.
 */
export declare type GlobalUpdater<T> = (updater: ((draft: Draft<T>) => void | T) | T) => void;
export declare function useGlobalImmer<K extends keyof State>(property: K): [
    State[K],
    GlobalUpdater<State[K]>
];
export declare function useGlobalImmer<State extends {}, K extends keyof State>(property: K): [
    State[K],
    GlobalUpdater<State[K]>
];
export declare function useGlobalImmer(): [
    State,
    GlobalUpdater<State>
];
export declare function useGlobalImmer<State extends {}>(): [
    State,
    GlobalUpdater<State>
];
export declare function setGlobalImmer(updater: (draft: Draft<State>) => void | State): Promise<State>;
export declare function setGlobalImmer<K extends keyof State>(property: K, updater: (draft: Draft<State[K]>) => void | State[K]): Promise<State>;
export declare function setGlobalImmerProvider<State>(provider: ReactNProvider<State>, updater: (draft: Draft<State>) => void | State): Promise<State>;
export declare function setGlobalImmerProvider<State, K extends keyof State>(provider: ReactNProvider<State>, property: K, updater: (draft: Draft<State[K]>) => void | State[K]): Promise<State>;
