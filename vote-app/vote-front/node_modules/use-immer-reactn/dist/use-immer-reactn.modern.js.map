{"version":3,"file":"use-immer-reactn.modern.js","sources":["../src/index.ts"],"sourcesContent":["import produce, {Draft} from 'immer';\nimport {useCallback} from 'react';\nimport {getGlobal, setGlobal, useGlobal} from 'reactn';\nimport {State} from 'reactn/default';\nimport ReactNProvider from 'reactn/types/provider';\n\n/**\n * Updater callback, which supports passing a callback\n * function, which accepts a draft or a finished state object.\n */\nexport type GlobalUpdater<T> = ( updater:\n\t// Pass an updater function, which accepts a draft.\n\t( ( draft: Draft<T> ) => void | T ) |\n\t// Pass a finished object.\n\tT,\n) => void;\n\n// Use property of Global State.\nexport function useGlobalImmer<K extends keyof State>( property: K ):\n\t[ State[K], GlobalUpdater<State[K]>];\n// Use property from context provider.\nexport function useGlobalImmer<State extends {}, K extends keyof State>( property: K ):\n\t[ State[K], GlobalUpdater<State[K]>];\n// Use entire global state.\nexport function useGlobalImmer():\n\t[ State, GlobalUpdater<State> ]\n// Use entire context provider's state.\nexport function useGlobalImmer<State extends {}>():\n\t[ State, GlobalUpdater<State> ]\n\n/**\n * UseImmer for Global State\n *\n * @param {string|undefined} property\n */\nexport function useGlobalImmer( property? ) {\n\tconst [ val, updateValue ] = useGlobal( property );\n\n\treturn [ val, useCallback( updater => {\n\t\tif ( typeof updater === 'function' ) {\n\t\t\tupdateValue( produce( val, updater ) );\n\t\t} else {\n\t\t\tupdateValue( updater );\n\t\t}\n\t}, [ property, updateValue, val ] ) ];\n}\n\n\n// Set entire Global State.\nexport function setGlobalImmer( updater: ( draft: Draft<State> ) => void | State ): Promise<State>;\n// Set property of Global State.\nexport function setGlobalImmer<K extends keyof State>( property: K, updater: ( draft: Draft<State[K]> ) => void | State[K] ): Promise<State>;\n\n/**\n * Set Global State with Immer.\n *\n * @param {string|Function} propertyOrProducer - If a function is passed, we are working with entire\n * global state and this argument is used as the producer.\n * @param {Function|undefined} [producer] - If a property is passed as the first parameter,\n *                                          this argument is the producer\n */\nexport function setGlobalImmer( propertyOrProducer, producer? ) {\n\tif ( typeof producer === 'function' ) {\n\t\treturn setGlobal( {\n\t\t\t[ propertyOrProducer ]: produce( getGlobal()[ propertyOrProducer ], producer )\n\t\t} );\n\t}\n\treturn setGlobal( produce( getGlobal(), propertyOrProducer ) );\n}\n\n\n// Set entire context provider's state.\nexport function setGlobalImmerProvider<State>( provider: ReactNProvider<State>, updater: ( draft: Draft<State> ) => void | State ): Promise<State>;\n// Set property of context provider's state.\nexport function setGlobalImmerProvider<State, K extends keyof State>( provider: ReactNProvider<State>, property: K, updater: ( draft: Draft<State[K]> ) => void | State[K] ): Promise<State>;\n\n/**\n * Set Global State with Immer within a custom Provider.\n *\n * @param {ReactNProvider} provider - Provider created via `createProvider`.\n * @param {string|Function} propertyOrProducer - If a function is passed, we are working with entire\n * global state and this argument is used as the producer.\n * @param {Function|undefined} [producer] - If a property is passed as the first parameter,\n *                                          this argument is the producer\n */\nexport function setGlobalImmerProvider( provider, propertyOrProducer, producer? ) {\n\tif ( typeof producer === 'function' ) {\n\t\treturn provider.setGlobal( {\n\t\t\t[ propertyOrProducer ]: produce( provider.getGlobal()[ propertyOrProducer ], producer )\n\t\t} );\n\t}\n\treturn provider.setGlobal( produce( provider.getGlobal(), propertyOrProducer ) );\n}\n"],"names":["useGlobalImmer","property","val","updateValue","useGlobal","useCallback","updater","produce","setGlobalImmer","propertyOrProducer","producer","setGlobal","getGlobal","setGlobalImmerProvider","provider"],"mappings":"mIAmCgBA,EAAgBC,GAC/B,MAAQC,EAAKC,GAAgBC,EAAWH,GAExC,MAAO,CAAEC,EAAKG,EAAaC,IAEzBH,EADuB,mBAAZG,EACEC,EAASL,EAAKI,GAEdA,IAEZ,CAAEL,EAAUE,EAAaD,cAiBbM,EAAgBC,EAAoBC,GACnD,OACQC,EADiB,mBAAbD,EACO,CACjBD,CAAEA,GAAsBF,EAASK,IAAaH,GAAsBC,IAGpDH,EAASK,IAAaH,aAkBzBI,EAAwBC,EAAUL,EAAoBC,GACrE,OACQI,EAASH,UADQ,mBAAbD,EACgB,CAC1BD,CAAEA,GAAsBF,EAASO,EAASF,YAAaH,GAAsBC,IAGpDH,EAASO,EAASF,YAAaH"}