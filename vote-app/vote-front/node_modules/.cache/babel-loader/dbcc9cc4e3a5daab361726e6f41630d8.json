{"ast":null,"code":"import t from \"immer\";\nimport { useCallback as o } from \"react\";\nimport { useGlobal as r, setGlobal as n, getGlobal as e } from \"reactn\";\n\nfunction f(n) {\n  var e = r(n),\n      f = e[0],\n      i = e[1];\n  return [f, o(function (o) {\n    i(\"function\" == typeof o ? t(f, o) : o);\n  }, [n, i, f])];\n}\n\nfunction i(o, r) {\n  var f;\n  return n(\"function\" == typeof r ? ((f = {})[o] = t(e()[o], r), f) : t(e(), o));\n}\n\nfunction u(o, r, n) {\n  var e;\n  return o.setGlobal(\"function\" == typeof n ? ((e = {})[r] = t(o.getGlobal()[r], n), e) : t(o.getGlobal(), r));\n}\n\nexport { i as setGlobalImmer, u as setGlobalImmerProvider, f as useGlobalImmer };","map":{"version":3,"mappings":";;;;SAmCgBA,EAAgBC;AAC/B,UAA6BC,EAAWD,CAAXC,CAA7B;AAAA,MAAQC,QAAR;AAAA,MAAaC,QAAb;AAEA,SAAO,CAAED,CAAF,EAAOE,EAAa;AAEzBD,MADuB,qBAAZE,CAAY,GACVC,EAASJ,CAATI,EAAcD,CAAdC,CADU,GAGVD,CAFbF;AAEaE,GAJDD,EAMX,CAAEJ,CAAF,EAAYG,CAAZ,EAAyBD,CAAzB,CANWE,CAAP,CAAP;AAM4BF;;AAAAA,SAiBbK,CAjBaL,CAiBGM,CAjBHN,EAiBuBO,CAjBvBP,EAiBuBO;AAAAA;AACnD,SACQC,EADiB,qBAAbD,CAAa,IAAbA,SAERD,CAFQC,IAEcH,EAASK,IAAaH,CAAbG,CAATL,EAA4CG,CAA5CH,CAFdG,EAE0DA,CAF7C,IAKPH,EAASK,GAATL,EAAsBE,CAAtBF,CAJVI,CADR;AAKwCF;;AAAAA,SAkBzBI,CAlByBJ,CAkBDK,CAlBCL,EAkBSA,CAlBTA,EAkB6BC,CAlB7BD,EAkB6BC;AAAAA;AACrE,SACQI,EAASH,SAATG,CADiB,qBAAbJ,CAAa,IAAbA,SAERD,CAFQC,IAEcH,EAASO,EAASF,SAATE,GAAsBL,CAAtBK,CAATP,EAAqDG,CAArDH,CAFdG,EAEmEA,CAFtD,IAKEH,EAASO,EAASF,SAATE,EAATP,EAA+BE,CAA/BF,CAJnBO,CADR;AAK0DL;;AAAAA","names":["useGlobalImmer","property","useGlobal","val","updateValue","useCallback","updater","produce","setGlobalImmer","propertyOrProducer","producer","setGlobal","getGlobal","setGlobalImmerProvider","provider"],"sources":["/Users/zhengwen/Desktop/vote/vote-front/node_modules/use-immer-reactn/src/index.ts"],"sourcesContent":["import produce, {Draft} from 'immer';\nimport {useCallback} from 'react';\nimport {getGlobal, setGlobal, useGlobal} from 'reactn';\nimport {State} from 'reactn/default';\nimport ReactNProvider from 'reactn/types/provider';\n\n/**\n * Updater callback, which supports passing a callback\n * function, which accepts a draft or a finished state object.\n */\nexport type GlobalUpdater<T> = ( updater:\n\t// Pass an updater function, which accepts a draft.\n\t( ( draft: Draft<T> ) => void | T ) |\n\t// Pass a finished object.\n\tT,\n) => void;\n\n// Use property of Global State.\nexport function useGlobalImmer<K extends keyof State>( property: K ):\n\t[ State[K], GlobalUpdater<State[K]>];\n// Use property from context provider.\nexport function useGlobalImmer<State extends {}, K extends keyof State>( property: K ):\n\t[ State[K], GlobalUpdater<State[K]>];\n// Use entire global state.\nexport function useGlobalImmer():\n\t[ State, GlobalUpdater<State> ]\n// Use entire context provider's state.\nexport function useGlobalImmer<State extends {}>():\n\t[ State, GlobalUpdater<State> ]\n\n/**\n * UseImmer for Global State\n *\n * @param {string|undefined} property\n */\nexport function useGlobalImmer( property? ) {\n\tconst [ val, updateValue ] = useGlobal( property );\n\n\treturn [ val, useCallback( updater => {\n\t\tif ( typeof updater === 'function' ) {\n\t\t\tupdateValue( produce( val, updater ) );\n\t\t} else {\n\t\t\tupdateValue( updater );\n\t\t}\n\t}, [ property, updateValue, val ] ) ];\n}\n\n\n// Set entire Global State.\nexport function setGlobalImmer( updater: ( draft: Draft<State> ) => void | State ): Promise<State>;\n// Set property of Global State.\nexport function setGlobalImmer<K extends keyof State>( property: K, updater: ( draft: Draft<State[K]> ) => void | State[K] ): Promise<State>;\n\n/**\n * Set Global State with Immer.\n *\n * @param {string|Function} propertyOrProducer - If a function is passed, we are working with entire\n * global state and this argument is used as the producer.\n * @param {Function|undefined} [producer] - If a property is passed as the first parameter,\n *                                          this argument is the producer\n */\nexport function setGlobalImmer( propertyOrProducer, producer? ) {\n\tif ( typeof producer === 'function' ) {\n\t\treturn setGlobal( {\n\t\t\t[ propertyOrProducer ]: produce( getGlobal()[ propertyOrProducer ], producer )\n\t\t} );\n\t}\n\treturn setGlobal( produce( getGlobal(), propertyOrProducer ) );\n}\n\n\n// Set entire context provider's state.\nexport function setGlobalImmerProvider<State>( provider: ReactNProvider<State>, updater: ( draft: Draft<State> ) => void | State ): Promise<State>;\n// Set property of context provider's state.\nexport function setGlobalImmerProvider<State, K extends keyof State>( provider: ReactNProvider<State>, property: K, updater: ( draft: Draft<State[K]> ) => void | State[K] ): Promise<State>;\n\n/**\n * Set Global State with Immer within a custom Provider.\n *\n * @param {ReactNProvider} provider - Provider created via `createProvider`.\n * @param {string|Function} propertyOrProducer - If a function is passed, we are working with entire\n * global state and this argument is used as the producer.\n * @param {Function|undefined} [producer] - If a property is passed as the first parameter,\n *                                          this argument is the producer\n */\nexport function setGlobalImmerProvider( provider, propertyOrProducer, producer? ) {\n\tif ( typeof producer === 'function' ) {\n\t\treturn provider.setGlobal( {\n\t\t\t[ propertyOrProducer ]: produce( provider.getGlobal()[ propertyOrProducer ], producer )\n\t\t} );\n\t}\n\treturn provider.setGlobal( produce( provider.getGlobal(), propertyOrProducer ) );\n}\n"]},"metadata":{},"sourceType":"module"}