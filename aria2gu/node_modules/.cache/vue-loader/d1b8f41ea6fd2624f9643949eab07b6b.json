{"remainingRequest":"/Users/zhengwen/Desktop/zw/aria2gu/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhengwen/Desktop/zw/aria2gu/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhengwen/Desktop/zw/aria2gu/src/App.vue","mtime":1638688317737},{"path":"/Users/zhengwen/Desktop/zw/aria2gu/node_modules/babel-loader/lib/index.js","mtime":1637998138838},{"path":"/Users/zhengwen/Desktop/zw/aria2gu/node_modules/cache-loader/dist/cjs.js","mtime":1637998138681},{"path":"/Users/zhengwen/Desktop/zw/aria2gu/node_modules/vue-loader/lib/index.js","mtime":1637998138883}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBBcmlhMkNsaWVudCBmcm9tICcuL2FyaWEyLWNsaWVudC5qcycKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKXsKICAgIHZhciBzZXJ2ZXJzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYXJpYTJTZXJ2ZXJzJykpIHx8IFtdCiAgICByZXR1cm57CiAgICAgIGdsb2JhbFN0YXQ6e30sCiAgICAgIHNldmVyczpzZXJ2ZXJzLAogICAgICBzZWxlY3RlZFNlcnZlcjpudWxsLAogICAgICBhcmlhMjpudWxsCiAgICB9CiAgfSwKICBtZXRob2RzOnsKICAgYXN5bmMgc3dpdGNoU2VydmVyKCl7CiAgICAgdGhpcy5hcmlhMj8uY2xvc2UoKQogICAgIHRoaXMuZ2xvYmFsU3RhdCA9IHt9CiAgICAgLy/lhbPpl63lvZPliY3mnI3liqHlmags5riF56m654q25oCBCiAgICAgdGhpcy5jb25uZWN0aW9uU3RhdHVzID0gJ+i/nuaOpeS4rS4uLicKICAgICAgdmFyIGFyaWEyID0gbmV3IEFyaWEyQ2xpZW50KHRoaXMuc2VsZWN0ZWRTZXJ2ZXIpCiAgICB0aGlzLmFyaWEyID0gYXJpYTIKICAgIHRyeXsKICAgICAgYXdhaXQgYXJpYTIucmVhZHkoKQogICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0dXMgPSAn5bey6L+e5o6lJwogICAgfWNhdGNoKGUpewogICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0dXMgPSAn6L+e5o6l5aSx6LSlJwogICAgfQogICAgfSwKICAgIHN0YXJ0SW50ZXJ2YWxVcGRhdGUoKXsKICAgICAgICAgIHRoaXMuaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGFzeW5jKCk9PnsKICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICB0aGlzLmdsb2JhbFN0YXQgPSBhd2FpdCB0aGlzLmFyaWEyLmdldEdsb2JhbFN0YXQoKQogICAgICAgICAgIH1jYXRjaChlKXsKICAgICAgICAgICAgIGlmKGUgPT0gJ1dTX0NPTk5FQ1RfRVJST1InKXsKICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsSWQpCiAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgdGhyb3cgZQogICAgICAgICAgICAgfQogICAgICAgICAgIH0KICAgIH0sMTAwMCkKICAgIH0KICB9LAogIGNyZWF0ZWQoKXsKICAgIHRoaXMuc2VsZWN0ZWRTZXJ2ZXIgPSB0aGlzLnNlcnZlcnNbMF0KICAgIHRoaXMuc3dpdGNoU2VydmVyKCkKICB9LAogYXN5bmMgbW91bnRlZCgpewogICAvLyDlrZDnu4Tku7blhYhNb3VudGVk77yM54i257uE5Lu25ZCObW91bnRlZAogICB0cnl7CiAgICAgdGhpcy5nbG9iYWxTdGF0ID0gYXdhaXQgdGhpcy5hcmlhMi5nZXRHbG9iYWxTdGF0KCkKICAgICB0aGlzLnN0YXJ0SW50ZXJ2YWxVcGRhdGUoKQogICB9Y2F0Y2goZSl7CiAgICBpZihlID09ICdXU19DT05ORUNUX0VSUk9SJyl7CiAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbElkKQogICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgIHRocm93IGUKICAgICAgICAgICAgIH0KICAgfQogIH0sCiAgd2F0Y2g6ewogICBhc3luYyBhcmlhMigpewogICAgICB0aGlzLmdsb2JhbFN0YXQgPSBhd2FpdCB0aGlzLmFyaWEyLmdldEdsb2JhbFN0YXQoKQogICAgICB0aGlzLnN0YXJ0SW50ZXJ2YWxVcGRhdGUoKQogICAgfS8vIOW9k+WIh+aNouacjeWKoeWZqOWQjumHjeaWsOi/nuaOpeaXtixhcmlhMuWPmOS6hu+8jOWImeaJp+ihjHN0YXJ0SW50ZXJ2YWx1cGRhdGUKICB9LAogIGJlZm9yZURlc3Ryb3koKXsKICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbElkKQogIH0KfQo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<style lang=\"less\">\n.main {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  display: flex;\n  // 横着摆放\n  h2{\n    margin: 0;\n  }\n}\n  #nav{\n    width: 180px;\n    border-right: 1px solid;\n     padding: 10px;\n  flex-grow: 0;\n  flex-shrink: 0;\n  }\n\n.global-stat{\n  text-align: right;\n}\n  a {\n    display: block;\n    font-weight: bold;\n    color: #2c3e50;\n    &.router-link-exact-active {\n      color: #42b983;\n    }\n  }\n\n</style>\n\n<template>\n  <div id=\"app\">\n<div class=\"main\">\n    <div id=\"nav\">\n      <select v-model=\"selectedServer\" @change=\"switchServer\">\n        <option v-for=\"(server,idx) of servers\" :key=\"server\" :value=\"idx\">{{ server.name || server.host +':'+server.port}}</option>\n      </select>\n      {{ connectionStatus }}\n      <router-link to=\"/\">正在下载({{ +globalStat.numWaiting + +globalStat.numActive }})</router-link> \n      <router-link to=\"/completed\">已完成({{ globalStat.numStopped }})</router-link>\n      <router-link to=\"/new\">新建下载</router-link>\n      <router-link to=\"/settings\">设置</router-link>\n      <routrr-link to=\"/servers\">服务器</routrr-link>\n    </div> \n    <router-view :aria2=\"aria2\" @servers-changed =\"servers = $event\" />\n  </div>\n<div class=\"global-stat\">全局上传速度:{{ globalStat.uploadSpeed }} 全局下载速度:{{ globalStat.downloadSpeed }}</div>\n</div>\n</template>\n<script>\nimport Aria2Client from './aria2-client.js'\nexport default {\n  data(){\n    var servers = JSON.parse(localStorage.getItem('aria2Servers')) || []\n    return{\n      globalStat:{},\n      severs:servers,\n      selectedServer:null,\n      aria2:null\n    }\n  },\n  methods:{\n   async switchServer(){\n     this.aria2?.close()\n     this.globalStat = {}\n     //关闭当前服务器,清空状态\n     this.connectionStatus = '连接中...'\n      var aria2 = new Aria2Client(this.selectedServer)\n    this.aria2 = aria2\n    try{\n      await aria2.ready()\n      this.connectionStatus = '已连接'\n    }catch(e){\n      this.connectionStatus = '连接失败'\n    }\n    },\n    startIntervalUpdate(){\n          this.intervalId = setInterval(async()=>{\n           try{\n             this.globalStat = await this.aria2.getGlobalStat()\n           }catch(e){\n             if(e == 'WS_CONNECT_ERROR'){\n               clearInterval(this.intervalId)\n             }else{\n               throw e\n             }\n           }\n    },1000)\n    }\n  },\n  created(){\n    this.selectedServer = this.servers[0]\n    this.switchServer()\n  },\n async mounted(){\n   // 子组件先Mounted，父组件后mounted\n   try{\n     this.globalStat = await this.aria2.getGlobalStat()\n     this.startIntervalUpdate()\n   }catch(e){\n    if(e == 'WS_CONNECT_ERROR'){\n               clearInterval(this.intervalId)\n             }else{\n               throw e\n             }\n   }\n  },\n  watch:{\n   async aria2(){\n      this.globalStat = await this.aria2.getGlobalStat()\n      this.startIntervalUpdate()\n    }// 当切换服务器后重新连接时,aria2变了，则执行startIntervalupdate\n  },\n  beforeDestroy(){\n    clearInterval(this.intervalId)\n  }\n}\n</script>\n"]}]}