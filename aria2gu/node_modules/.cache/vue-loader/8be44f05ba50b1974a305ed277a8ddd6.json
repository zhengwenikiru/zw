{"remainingRequest":"/Users/zhengwen/Desktop/zw/aria2gu/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhengwen/Desktop/zw/aria2gu/src/views/Downloading.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhengwen/Desktop/zw/aria2gu/src/views/Downloading.vue","mtime":1639295501652},{"path":"/Users/zhengwen/Desktop/zw/aria2gu/node_modules/cache-loader/dist/cjs.js","mtime":1637998138681},{"path":"/Users/zhengwen/Desktop/zw/aria2gu/node_modules/babel-loader/lib/index.js","mtime":1637998138838},{"path":"/Users/zhengwen/Desktop/zw/aria2gu/node_modules/cache-loader/dist/cjs.js","mtime":1637998138681},{"path":"/Users/zhengwen/Desktop/zw/aria2gu/node_modules/vue-loader/lib/index.js","mtime":1637998138883}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vIEAgaXMgYW4gYWxpYXMgdG8gL3NyYwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJEb3dubG9hZGluZyIsCiAgcHJvcHM6IFsnYXJpYTInXSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdGFza3M6IFtdLAogICAgICBzZWxlY3RlZDogW10sCiAgICAgIHNlYXJjaFRleHQ6ICcnLAogICAgICBzb3J0Q29sdW1uOiAnJywKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICB2aXNpYmxlVGFza3MoKSB7CiAgICAgIGlmICh0aGlzLnNlYXJjaFRleHQgPT0gJycpIHsKICAgICAgICByZXR1cm4gdGhpcy50YXNrcwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0aGlzLnRhc2tzLmZpbHRlcihpdCA9PiB7CiAgICAgICAgICByZXR1cm4gaXQuZmlsZXNbMF0ucGF0aC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRoaXMuc2VhcmNoVGV4dC50b0xvd2VyQ2FzZSgpKQogICAgICAgIH0pCiAgICAgIH0KICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBhcmlhMigpIHsKICAgICAgdGhpcy50YXNrcyA9IFtdCiAgICAgIHRoaXMudXBkYXRlTGlzdCgpCiAgICB9CiAgfSwKICBtb3VudGVkKCkgewogICAgdGhpcy5hcmlhMi5vbignRG93bmxvYWRTdGFydCcsICgpID0+IHsKICAgICAgdGhpcy51cGRhdGVMaXN0KCkKICAgIH0pCiAgICB0aGlzLmFyaWEyLm9uKCdEb3dubG9hZENvbXBsZXRlJywgKCkgPT4gewogICAgICB0aGlzLnVwZGF0ZUxpc3QoKQogICAgfSkKCiAgICB0aGlzLmludGVydmFsSWQgPSBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7CiAgICAgIHRyeSB7CiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVMaXN0KCkKICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgaWYgKGUgPT0gJ1dTX0NPTk5FQ1RJT05fRVJST1InKSB7CiAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxJZCkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhyb3cgZQogICAgICAgIH0KICAgICAgfQogICAgfSwgMTAwKQogIH0sCiAgbWV0aG9kczogewogICAgc29ydENoYW5nZSh7IGNvbHVtbiwgcHJvcCwgb3JkZXIgfSkgewogICAgICB0aGlzLnNvcnRDb2x1bW4gPSBjb2x1bW4KICAgIH0sCiAgICBnZXRTcGVlZChyb3cpIHsKICAgICAgLy8gY29uc29sZS5sb2coYXJncykKICAgICAgcmV0dXJuIChyb3cuZG93bmxvYWRTcGVlZCAvIDEwMjQgKS50b0ZpeGVkKDIpICsgJ2svcycKICAgIH0sCiAgICBnb0RldGFpbCh0YXNrKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvdGFzay8nICsgdGFzay5naWQpCiAgICB9LAogICAgYXN5bmMgdXBkYXRlTGlzdCgpIHsKICAgICAgdHJ5IHsKICAgICAgICB0aGlzLnRhc2tzID0gWwogICAgICAgICAgLi4uYXdhaXQgdGhpcy5hcmlhMi50ZWxsQWN0aXZlKCksCiAgICAgICAgICAuLi5hd2FpdCB0aGlzLmFyaWEyLnRlbGxXYWl0aW5nKDAsIDEwMCkKICAgICAgICBdCiAgICAgIH0gY2F0Y2goZSkgewogICAgICAgIHRoaXMudGFza3MgPSBbXQogICAgICAgIHRocm93IGUKICAgICAgfQogICAgfSwKICAgIC8vIOWvuemAieS4reeahOS7u+WKoeaJp+ihjOafkOenjeaTjeS9nO+8muW8gOWni++8jOaaguWBnO+8jOWIoOmZpAogICAgYXN5bmMgZXhlY1NlbGVjdGVkKGFjdGlvbikgewogICAgICBpZiAoYWN0aW9uID09ICdyZW1vdmUnKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGF3YWl0IHRoaXMuJGNvbmZpcm0oJ+ehruWumuWIoOmZpOWQlz8nKQogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgc2VsZWN0ZWRUYXNrID0gdGhpcy50YXNrcy5maWx0ZXIodGFzayA9PiB7CiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWQuaW5jbHVkZXModGFzay5naWQpCiAgICAgIH0pCiAgICAgIGZvciAobGV0IHRhc2sgb2Ygc2VsZWN0ZWRUYXNrKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGlmIChhY3Rpb24gPT0gJ3BhdXNlJyAmJiB0YXNrLnN0YXR1cyA9PSAncGF1c2VkJykgewogICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgfQogICAgICAgICAgaWYgKGFjdGlvbiA9PSAndW5wYXVzZScgJiYgdGFzay5zdGF0dXMgPT0gJ2FjdGl2ZScpIHsKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0KICAgICAgICAgIGF3YWl0IHRoaXMuYXJpYTJbYWN0aW9uXSh0YXNrLmdpZCkKICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgIHRoaXMuJGFsZXJ0KGUubWVzc2FnZSkudGhlbigoKSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdva2tra2snKQogICAgICAgICAgfSkKICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy51cGRhdGVMaXN0KCkKICAgIH0sCiAgICBzZWxlY3RBbGwoKSB7CiAgICAgIGlmICh0aGlzLnNlbGVjdGVkLmxlbmd0aCA9PSB0aGlzLnRhc2tzLmxlbmd0aCkgewogICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBbXQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB0aGlzLnRhc2tzLm1hcChpdCA9PiBpdC5naWQpCiAgICAgIH0KICAgIH0sCiAgICB0b2dnbGVTZWxlY3QodGFzaykgewogICAgICB2YXIgaWR4ID0gdGhpcy5zZWxlY3RlZC5pbmRleE9mKHRhc2suZ2lkKQoKICAgICAgaWYgKGlkeCA9PSAtMSkgewogICAgICAgIHRoaXMuc2VsZWN0ZWQucHVzaCh0YXNrLmdpZCkKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNlbGVjdGVkLnNwbGljZShpZHgsIDEpCiAgICAgIH0KICAgIH0sCiAgICBnZXRGaWxlbmFtZSh0YXNrKSB7CiAgICAgIGlmICh0YXNrLmZpbGVzPy5bMF0ucGF0aCkgewogICAgICAgIHJldHVybiB0YXNrLmZpbGVzWzBdLnBhdGguc3BsaXQoJy8nKS5hdCgtMSkKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGFzay5maWxlcz8udXJpcz8uWzBdPy51cmkuc3BsaXQoJy8nKS5hdCgtMSkgPz8gJ+acquefpScKICAgICAgfQogICAgfSwKICAgIGdldFBlcmNlbnQodGFzaykgewogICAgICBpZiAodGFzay5jb21wbGV0ZWRMZW5ndGggPT0gMCkgewogICAgICAgIHJldHVybiAwCiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICh0YXNrLmNvbXBsZXRlZExlbmd0aCAvIHRhc2sudG90YWxMZW5ndGggKiAxMDApLnRvRml4ZWQoMikgKyclJwogICAgICB9CiAgICB9LAogIH0sCiAgYmVmb3JlRGVzdHJveSgpIHsKICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbElkKQogIH0sCiAgY29tcG9uZW50czogewoKICB9LAp9Owo="},{"version":3,"sources":["Downloading.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Downloading.vue","sourceRoot":"src/views","sourcesContent":["<style lang=\"less\" scoped>\n  ul {\n    list-style: none;\n  }\n  li {\n    /* display: flex; */\n    cursor: pointer;\n    &.selected {\n      background-color: rgb(221, 221, 221);\n    }\n    &:hover {\n      background-color: skyblue;\n    }\n  }\n</style>\n<template>\n  <div class=\"downloading\">\n    <h2>正在下载</h2>\n    <div>\n      <el-button type=\"primary\" icon=\"el-icon-video-pause\" @click=\"execSelected('pause')\">暂停</el-button>\n      <el-button type=\"primary\" icon=\"el-icon-video-play\" @click=\"execSelected('unpause')\">开始</el-button>\n      <el-button type=\"primary\" icon=\"el-icon-circle-close\" @click=\"execSelected('remove')\">删除</el-button>\n      <el-button type=\"primary\" icon=\"el-icon-check\" @click=\"selectAll\">全选</el-button>\n      <el-input size=\"small\" placeholder=\"请输入内容\" prefix-icon=\"el-icon-search\" v-model=\"searchText\"/>\n    </div>\n    <ul>\n      <li v-for=\"task of visibleTasks\" :class=\"{selected: selected.includes(task.gid)}\" :key=\"task.gid\" @click=\"toggleSelect(task)\">\n        <input type=\"checkbox\" :checked=\"selected.includes(task.gid)\" >\n        <span>{{ getFilename(task) }}</span>\n        |\n        <span>{{ getPercent(task) }}</span>\n        |\n        <span>{{ task.downloadSpeed / 1024 | fixed }}k/s</span>\n        |\n        <span>{{ task.status }}</span>\n        |\n        <!-- <button @click.stop=\"goDetail(task)\">详情</button> -->\n        <router-link @click.native.stop :to=\"{name: 'taskDetail', params: {gid: task.gid}}\">详情</router-link>\n      </li>\n    </ul>\n    <el-table\n      @sort-change=\"sortChange\"\n      :data=\"visibleTasks\"\n      style=\"width: 100%\">\n      <el-table-column\n        prop=\"gid\"\n        label=\"名称\"\n        sortable>\n      </el-table-column>\n      <el-table-column\n        :formatter=\"getPercent\"\n        label=\"进度\"\n        sortable>\n      </el-table-column>\n      <el-table-column\n        :formatter=\"getSpeed\"\n        label=\"速度\"\n        sortable>\n      </el-table-column>\n      <el-table-column\n        prop=\"status\"\n        label=\"状态\"\n        sortable>\n      </el-table-column>\n    </el-table>\n\n\n  </div>\n</template>\n\n<script>\n// @ is an alias to /src\n\nexport default {\n  name: \"Downloading\",\n  props: ['aria2'],\n  data() {\n    return {\n      tasks: [],\n      selected: [],\n      searchText: '',\n      sortColumn: '',\n    }\n  },\n  computed: {\n    visibleTasks() {\n      if (this.searchText == '') {\n        return this.tasks\n      } else {\n        return this.tasks.filter(it => {\n          return it.files[0].path.toLowerCase().includes(this.searchText.toLowerCase())\n        })\n      }\n    }\n  },\n  watch: {\n    aria2() {\n      this.tasks = []\n      this.updateList()\n    }\n  },\n  mounted() {\n    this.aria2.on('DownloadStart', () => {\n      this.updateList()\n    })\n    this.aria2.on('DownloadComplete', () => {\n      this.updateList()\n    })\n\n    this.intervalId = setInterval(async () => {\n      try {\n        await this.updateList()\n      } catch(e) {\n        if (e == 'WS_CONNECTION_ERROR') {\n          clearInterval(this.intervalId)\n        } else {\n          throw e\n        }\n      }\n    }, 100)\n  },\n  methods: {\n    sortChange({ column, prop, order }) {\n      this.sortColumn = column\n    },\n    getSpeed(row) {\n      // console.log(args)\n      return (row.downloadSpeed / 1024 ).toFixed(2) + 'k/s'\n    },\n    goDetail(task) {\n      this.$router.push('/task/' + task.gid)\n    },\n    async updateList() {\n      try {\n        this.tasks = [\n          ...await this.aria2.tellActive(),\n          ...await this.aria2.tellWaiting(0, 100)\n        ]\n      } catch(e) {\n        this.tasks = []\n        throw e\n      }\n    },\n    // 对选中的任务执行某种操作：开始，暂停，删除\n    async execSelected(action) {\n      if (action == 'remove') {\n        try {\n          await this.$confirm('确定删除吗?')\n        } catch(e) {\n          return\n        }\n      }\n\n      var selectedTask = this.tasks.filter(task => {\n        return this.selected.includes(task.gid)\n      })\n      for (let task of selectedTask) {\n        try {\n          if (action == 'pause' && task.status == 'paused') {\n            continue\n          }\n          if (action == 'unpause' && task.status == 'active') {\n            continue\n          }\n          await this.aria2[action](task.gid)\n        } catch(e) {\n          this.$alert(e.message).then(() => {\n            console.log('okkkkk')\n          })\n        }\n      }\n      this.updateList()\n    },\n    selectAll() {\n      if (this.selected.length == this.tasks.length) {\n        this.selected = []\n      } else {\n        this.selected = this.tasks.map(it => it.gid)\n      }\n    },\n    toggleSelect(task) {\n      var idx = this.selected.indexOf(task.gid)\n\n      if (idx == -1) {\n        this.selected.push(task.gid)\n      } else {\n        this.selected.splice(idx, 1)\n      }\n    },\n    getFilename(task) {\n      if (task.files?.[0].path) {\n        return task.files[0].path.split('/').at(-1)\n      } else {\n        return task.files?.uris?.[0]?.uri.split('/').at(-1) ?? '未知'\n      }\n    },\n    getPercent(task) {\n      if (task.completedLength == 0) {\n        return 0\n      } else {\n        return (task.completedLength / task.totalLength * 100).toFixed(2) +'%'\n      }\n    },\n  },\n  beforeDestroy() {\n    clearInterval(this.intervalId)\n  },\n  components: {\n\n  },\n};\n</script>\n"]}]}